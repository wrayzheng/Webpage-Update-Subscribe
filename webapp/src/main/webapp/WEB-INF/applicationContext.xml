<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context" xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"> <!-- bean definitions here -->

	<!-- 使用 properties 配置文件中的值 -->
	<context:property-placeholder location="classpath:jdbc.properties"/>
	
	<!-- 数据库连接池 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<!-- 配置连接池属性 -->
		<property name="driverClass" value="${jdbc.driver}" />
		<property name="jdbcUrl" value="${jdbc.url}" />
		<property name="user" value="${jdbc.username}" />
	    <property name="password" value="${jdbc.password}" />
		
		<!-- c3p0 连接池私有属性 -->
		<property name="maxPoolSize" value="20" />
		<property name="minPoolSize" value="3" />
		<property name="autoCommitOnClose" value="false" />
		<property name="checkoutTimeout" value="1000" />
		<property name="acquireRetryAttempts" value="2" />
	</bean>
	
	<!-- 配置 SqlSessionFactory 对象 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 注入数据库连接池 -->
		<property name="dataSource" ref="dataSource" />
		<!-- 注入 mybatis 全局配置文件 -->
		<property name="configLocation" value="classpath:mybatis-config.xml" />
		<!-- 扫描 bean 包 使用别名 -->
		<property name="typeAliasesPackage" value="com.codebelief.app.bean" />
		<!-- 扫描 mapper 配置文件 -->
		<property name="mapperLocations" value="classpath:mapper/*.xml" />
	</bean>
	
	<!-- 扫描 Dao 接口包，动态实现 Dao 接口，并注入到 spring 容器中 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 注入 sqlSessionFactory -->
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
		<!-- 给出需要扫描的 Dao 接口的包 -->
		<property name="basePackage" value="com.codebelief.app.dao" />
		<!-- 只扫描带有 Repository 注解的类 -->
		<!-- <property name="annotationClass" value="org.springframework.stereotype.Repository" /> -->
	</bean>

	<!-- 在指定包中扫描含 Component 注解的类，为其创建 bean  -->
	<context:component-scan base-package="com.codebelief.app.action,com.codebelief.app.rwDatabase,com.codebelief.app.compare,com.codebelief.app.pushupdate"></context:component-scan>

</beans>